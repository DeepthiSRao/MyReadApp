{"version":3,"sources":["BooksAPI.js","Components/BookShelfHandler.js","Components/Book.js","Components/BookShelf.js","Components/BookList.js","Components/SearchBar.js","Components/SearchResult.js","Components/SearchBook.js","Components/App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","update","book","shelf","fetch","id","method","body","JSON","stringify","then","res","json","search","query","data","books","BookShelfHandler","props","className","value","onChange","e","selectHandler","target","disabled","Book","title","authors","imageLinks","Fragment","style","width","height","backgroundImage","thumbnail","join","BookShelf","bookList","filterBookByShelf","filter","category","label","map","key","BookList","shelves","selectOptionHandler","to","SearchBar","onSearch","onReset","useState","term","setTerm","delayedQuery","React","useRef","_","debounce","q","current","onClick","type","placeholder","autoFocus","SearchResult","booksList","SearchBook","searchBooks","myBooks","updatedBooks","searchBook","commonBook","find","shelvesList","App","state","error","handleSelectInput","BookApi","catch","console","log","setState","prevState","b","concat","handleSearchBook","resetSearch","this","path","exact","render","Component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3a8aaa14.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst BookShelfHandler = (props) => {\r\n    const handleInputChange = (e) => {\r\n        props.selectHandler(props.book, e.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"book-shelf-changer\">\r\n            <select value={props.shelf} onChange={handleInputChange}>\r\n                <option value=\"move\" disabled>Move to...</option>\r\n                <option value=\"currentlyReading\">Currently Reading</option>\r\n                <option value=\"wantToRead\">Want to Read</option>\r\n                <option value=\"read\">Read</option>\r\n                <option value=\"none\">None</option>\r\n            </select>\r\n        </div>\r\n    );\r\n}\r\n\r\nBookShelfHandler.propTypes = {\r\n    book: PropTypes.object.isRequired,\r\n    selectHandler: PropTypes.func,\r\n    shelf: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default BookShelfHandler;","import React from 'react';\r\nimport BookShelfHandler from './BookShelfHandler';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Book = ({ book, shelf, selectHandler }) => {\r\n    const { title, authors, imageLinks } = book;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <li>\r\n                <div className=\"book\">\r\n                    <div className=\"book-top\">\r\n                        <div className=\"book-cover\"\r\n                            style={{\r\n                                width: 128,\r\n                                height: 193,\r\n                                backgroundImage:\r\n                                    `url(${\r\n                                    imageLinks ?\r\n                                        imageLinks.thumbnail\r\n                                        : \"No book cover availabel\"})`\r\n                                    }}>\r\n                        </div>\r\n                        <BookShelfHandler\r\n                            book={book}\r\n                            shelf={shelf}\r\n                            selectHandler={selectHandler} />\r\n                    </div>\r\n                    <div className=\"book-title\">{title}</div>\r\n                    <div className=\"book-authors\">{authors ? authors.join(', ') : \"Unknown author\"}</div>\r\n                </div>\r\n             </li>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nBook.propTypes = {\r\n    book: PropTypes.object.isRequired,\r\n    selectHandler: PropTypes.func,\r\n    shelves: PropTypes.array,\r\n}\r\n\r\nexport default Book;","import React from 'react';\r\nimport Book from './Book';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst BookShelf = ({ shelf, bookList, selectHandler }) => {\r\n    //filter the books by shelf category\r\n    const filterBookByShelf = bookList.filter(book => book.shelf === shelf.category);\r\n\r\n    return (\r\n        <div className=\"list-books-content\">\r\n            <div>\r\n                <div className=\"bookshelf\">\r\n                    <h2 className=\"bookshelf-title\">{shelf.label}</h2>\r\n                    <div className=\"bookshelf-books\">\r\n                        <ol className=\"books-grid\">\r\n                            {\r\n                                filterBookByShelf.map(book =>\r\n                                    <Book\r\n                                        key={book.id}\r\n                                        book={book}\r\n                                        selectHandler={selectHandler}\r\n                                        shelf={shelf.category} />\r\n                                )\r\n                            }\r\n                        </ol>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nBookShelf.propTypes = {\r\n    bookList: PropTypes.array.isRequired,\r\n    selectHandler: PropTypes.func,\r\n    shelves: PropTypes.array,\r\n}\r\n\r\nexport default BookShelf;\r\n","import React from 'react';\r\nimport BookShelf from './BookShelf';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst BookList = ({ shelves, bookList, selectOptionHandler }) => {\r\n    return (\r\n        <div className=\"list-books\">\r\n            <div className=\"list-books-title\">\r\n                <h1>MyReads</h1>\r\n            </div>\r\n            <div className=\"list-books-content\">\r\n                    {\r\n                        shelves.map(shelf => (\r\n                            <BookShelf\r\n                                key={shelf.id}\r\n                                shelf={shelf}\r\n                                bookList={bookList}\r\n                                selectHandler={selectOptionHandler} />\r\n                        ))\r\n                    }\r\n            </div>\r\n            <div className=\"open-search\">\r\n                <Link to=\"/search\">\r\n                    <button>\r\n                        Add a book\r\n                    </button>\r\n                </Link>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nBookList.propTypes = {\r\n    bookList: PropTypes.array.isRequired,\r\n    selectHandler: PropTypes.func,\r\n    shelves: PropTypes.array,\r\n}\r\n\r\nexport default BookList;","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport _ from \"lodash\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SearchBar = ({ onSearch, onReset }) => {\r\n    const [term, setTerm] = useState(\"\");\r\n\r\n    const delayedQuery = React.useRef(_.debounce(q => onSearch(q), 200)).current;\r\n\r\n    const handleChange = e => {\r\n        const { value } = e.target;\r\n        setTerm(value);\r\n        delayedQuery(value);\r\n    }\r\n    \r\n    return (\r\n            <div className=\"search-books-bar\">\r\n                <Link to=\"/\">\r\n                <button className=\"close-search\" onClick={onReset}>Close</button>\r\n                </Link>\r\n                <div className=\"search-books-input-wrapper\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Search by title or author\"\r\n                        autoFocus\r\n                        value={term}\r\n                        onChange={handleChange} />\r\n                </div>\r\n            </div>\r\n        );\r\n}\r\n\r\nSearchBar.propTypes = {\r\n    onSearch: PropTypes.func,\r\n    onReset: PropTypes.func,\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\nimport Book from './Book';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SearchResult = (props) => {\r\n    const { booksList, selectHandler } = props;\r\n\r\n    return (\r\n        <div className=\"search-books-results\">\r\n            <ol className=\"books-grid\">\r\n                {booksList && booksList.map((book) => (\r\n                       <Book\r\n                            key={book.id}\r\n                            book={book}\r\n                            shelf={book.shelf ? book.shelf : 'none'}\r\n                            selectHandler={selectHandler}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </div>\r\n    );\r\n}\r\n\r\nSearchResult.propTypes = {\r\n    booksList: PropTypes.array.isRequired,\r\n    selectHandler: PropTypes.func,\r\n}\r\n\r\nexport default SearchResult;","import React from 'react';\r\nimport SearchBar from './SearchBar';\r\nimport SearchResult from './SearchResult';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SearchBook = props => {\r\n    const { searchBooks, myBooks, onSearch, selectOptionHandler, onReset } = props;\r\n\r\n    const updatedBooks = searchBooks.map((searchBook) => {\r\n        const commonBook = myBooks.find((book) => {\r\n            return book.id === searchBook.id;\r\n        });\r\n        searchBook.shelf = commonBook ? commonBook.shelf : 'none';\r\n        return searchBook;\r\n    });\r\n\r\n    return (\r\n        <div className=\"search-books\">\r\n            <SearchBar\r\n                onSearch={onSearch}\r\n                onReset={onReset} />\r\n            <SearchResult\r\n                booksList={updatedBooks}\r\n                selectHandler={selectOptionHandler} />\r\n        </div>  \r\n    );\r\n}\r\n\r\nSearchBook.propTypes = {\r\n    myBooks: PropTypes.array.isRequired,\r\n    searchBooks: PropTypes.array.isRequired,\r\n    onSearch: PropTypes.func,\r\n    selectOptionHandler: PropTypes.func,\r\n    onReset: PropTypes.func,\r\n}\r\n\r\nexport default SearchBook;","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport * as BookApi from '../BooksAPI';\r\nimport BookList from './BookList';\r\nimport SearchBook from './SearchBook';\r\nimport '../App.css';\r\n\r\nconst shelvesList = [\r\n    { id: 1, category: \"currentlyReading\", label: \"Currently Reading\"},\r\n    { id: 2, category: \"wantToRead\", label: \"Want to Read\" },\r\n    { id: 3, category: \"read\", label: \"Read\" }\r\n];\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        myBooks: [],\r\n        searchBooks: [],\r\n        error: false,\r\n    }\r\n\r\n    componentDidMount() {\r\n        BookApi.getAll()\r\n               .then(books => {\r\n                   this.setState({\r\n                       myBooks: books\r\n                   });\r\n                })\r\n               .catch(error => {\r\n                   console.log(\"Books get request failed\" + error);\r\n                   this.setState({ error: true });\r\n               });\r\n    }\r\n\r\n    /*\r\n      1. Send Update req to API\r\n      2. Update myBooks list\r\n         a. Remove the book from the list if label is \"none\"\r\n         b. Else add the book to the list if modified shelf\r\n      * */\r\n    handleSelectInput = (book, value) => {\r\n        BookApi.update(book, value)\r\n               .catch(error => {\r\n                    console.log(\"Books update request failed\" + error);\r\n                    this.setState({ error: true });\r\n               });\r\n\r\n        if (value === \"none\") {\r\n            this.setState(prevState => ({\r\n                myBooks: prevState.myBooks.filter(b => b.title !== book.title)\r\n            }));\r\n\r\n        } else {\r\n            book.shelf = value;\r\n            this.setState(prevState => ({\r\n                myBooks : prevState.myBooks.filter(b => b.title !== book.title).concat(book)\r\n            }));\r\n        }\r\n    }\r\n\r\n    handleSearchBook = (query) => {\r\n        if (!query) {\r\n            this.resetSearch();\r\n        } else {\r\n            BookApi.search(query)\r\n                .then((books) => {\r\n                    this.setState({\r\n                        searchBooks: books.error ? [] : books\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    console.log(\"There is a search error!! \" + error);\r\n                    this.setState({ error: true });\r\n                });\r\n        }\r\n    }\r\n\r\n    resetSearch = () => {\r\n        this.setState({\r\n            searchBooks: []\r\n        });\r\n    } \r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app\">\r\n                {\r\n                    this.state.error &&\r\n                    <p>Please try later!!! Looks there is an issue!!!</p> \r\n                }\r\n                <Route\r\n                    path=\"/\"\r\n                    exact\r\n                    render={() => (\r\n                        <BookList\r\n                            bookList={this.state.myBooks}\r\n                            shelves={shelvesList}\r\n                            selectOptionHandler={this.handleSelectInput} />\r\n                    )}\r\n                />\r\n                <Route\r\n                    path=\"/search\"\r\n                    exact\r\n                    render={() => (\r\n                        <SearchBook\r\n                            myBooks={this.state.myBooks}\r\n                            searchBooks={this.state.searchBooks}\r\n                            onSearch={this.handleSearchBook}\r\n                            onReset={this.resetSearch}\r\n                            selectOptionHandler={this.handleSelectInput} />\r\n                    )}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './Components/App';\nimport './index.css';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \n    document.getElementById('root')\n);\n"],"sourceRoot":""}